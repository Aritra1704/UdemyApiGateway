#Assign port number automatically
server.port=8082
#Application name
spring.application.name=udemy-api-gateway
#Eureka server URL
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka

#Setup Id to route
spring.cloud.gateway.routes[0].id=users-status-check
#Setup uri for the route(lb=load balancer)(name of micro service)
spring.cloud.gateway.routes[0].uri=lb://udemy-user
#Setup incoming url api path
spring.cloud.gateway.routes[0].predicates[0]=Path=/udemy-user/users/status/check
#Setup further validation as of which HTTP request to accept(comma separated values can be added)
spring.cloud.gateway.routes[0].predicates[1]=Method=GET, POST, PUT, DELETE
#Built in predicate
#spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
#Setup filter
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
#Rewrites url path from 1st one to 2nd one
#spring.cloud.gateway.routes[0].filters[1]=RewritePath=/udemy-user/users/status/check, /users/status/check
#Same as above just used RegEx
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/udemy-user/(?<segment>.*), /$\{segment}
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter

POST API
spring.cloud.gateway.routes[1].id=users
spring.cloud.gateway.routes[1].uri=lb://udemy-user
spring.cloud.gateway.routes[1].predicates[0]=Path=/udemy-user/users
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/udemy-user/(?<segment1>.*), /$\{segment1}
#
#POST API
spring.cloud.gateway.routes[2].id=users-login
spring.cloud.gateway.routes[2].uri=lb://udemy-user
spring.cloud.gateway.routes[2].predicates[0]=Path=/udemy-user/users/login
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/udemy-user/(?<segment2>.*), /$\{segment2}

#POST API
spring.cloud.gateway.routes[3].id=users-get-update-delete
spring.cloud.gateway.routes[3].uri=lb://udemy-user
spring.cloud.gateway.routes[3].predicates[0]=Path=/udemy-user/users/**
spring.cloud.gateway.routes[3].predicates[1]=Method=GET, PUT, DELETE
spring.cloud.gateway.routes[3].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=AuthorizationHeaderFilter
spring.cloud.gateway.routes[3].filters[2]=RewritePath=/udemy-user/(?<segment3>.*), /$\{segment3}

##To allow spring cloud gateway to create routes based on services registered with discovery service
#spring.cloud.gateway.discovery.locator.enabled=true
##To allow spring cloud gateway to take in lower caps characters
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

token.secret=fejo454fe45f4e54fe4f
#To import from config server
spring.config.import=optional:configserver:http://localhost:8012

#Set up RabbitMQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=aritra
spring.rabbitmq.password=123456Aa

management.endpoints.web.exposure.include=beans,health,routes,httptrace,gateway,busrefresh
management.endpoint.gateway.enabled=true

#The After Route Predicate Factory
#This route matches any request made after Jan 20, 2017 17:42 Mountain Time (Denver).
#spring.cloud.gateway.routes[0].id = after_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = After=2017-01-20T17:42:47.789-07:00[America/Denver]

#The Before Route Predicate Factory
#This route matches any request made before Jan 20, 2017 17:42 Mountain Time (Denver).
#spring.cloud.gateway.routes[0].id = before_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Before=2017-01-20T17:42:47.789-07:00[America/Denver]

#The Between Route Predicate Factory
#This route matches any request made after Jan 20, 2017 17:42 Mountain Time (Denver) and before Jan 21, 2017 17:42 Mountain Time (Denver). This could be useful for maintenance windows.
#spring.cloud.gateway.routes[0].id = between_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]

#The Cookie Route Predicate Factory
#This route matches requests that have a cookie named chocolate whose value matches the ch.p regular expression.
#spring.cloud.gateway.routes[0].id = cookie_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Cookie=chocolate, ch.p

#The Header Route Predicate Factory
#This route matches if the request has a header named X-Request-Id whose value matches the \d+ regular expression (that is, it has a value of one or more digits).
#spring.cloud.gateway.routes[0].id = header_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Header=X-Request-Id, \d+

#The Host Route Predicate Factory
#This route matches if the request has a Host header with a value of www.somehost.org or beta.somehost.org or www.anotherhost.org.
#spring.cloud.gateway.routes[0].id = host_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Host=**.somehost.org,**.anotherhost.org

#The Method Route Predicate Factory
#This route matches if the request method was a GET or a POST.
#spring.cloud.gateway.routes[0].id = method_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Method=GET,POST

#The Path Route Predicate Factory
#This route matches if the request path was, for example: /red/1 or /red/blue or /blue/green.
#spring.cloud.gateway.routes[0].id = path_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Path=/red/{segment},/blue/{segment}

#The Query Route Predicate Factory
#The preceding route matches if the request contained a green query parameter.
#spring.cloud.gateway.routes[0].id = query_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Query=green

#The RemoteAddr Route Predicate Factory
#This route matches if the remote address of the request was, for example, 192.168.1.10.
#spring.cloud.gateway.routes[0].id = remoteaddress_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = RemoteAddr=192.168.1.1/24

#The Weight Route Predicate Factory
#This route would forward ~80% of traffic to weighthigh.org and ~20% of traffic to weighlow.org
#spring.cloud.gateway.routes[0].id = weight_high
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Weight=group1, 8
#
#spring.cloud.gateway.routes[1].id = weight_low
#spring.cloud.gateway.routes[1].uri = https://example.org
#spring.cloud.gateway.routes[1].predicates[0] = Weight=group1, 2